#version 450 core

#define MAX_GEO_PER_AIR 3

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

// Types -----------------------------------------------------------------------

struct Result {
    vec4 lift;
    vec4 drag;
    vec4 torq;
};

struct GeoPixel {
    vec2 windPos;
    ivec2 texCoord;
    vec4 normal;
};

struct AirPixel {
    vec2 windPos;
    vec2 backforce;
    vec4 velocity; // fourth component is turbulence
};

struct AirGeoMapElement {
    int geoCount;
    int geoIndices[MAX_GEO_PER_AIR];
};

// Constants -------------------------------------------------------------------

const float k_turbulenceDist = 0.025f;
const float k_maxSearchDist = 2.0f * k_turbulenceDist; // In wind space
const bool k_doTurbulence = true;

const float k_minNormalZ = 1.0f / 1000000.0f;
const float k_maxNormalZ = 1.0f - k_minNormalZ;

const bool k_doLineSearch = true;

const bool k_distinguishActivePixels = true; // Makes certain "active" pixels brigher for visual clarity, but lowers performance
const float k_inactiveVal = k_distinguishActivePixels ? 1.0f / 3.0f : 1.0f;

const bool k_ignoreEdges = false;

float k_airDensity = 1.0f;

// Uniforms --------------------------------------------------------------------

layout (binding = 0, rgba8) uniform  image2D u_fboImg;
layout (binding = 2,  r32i) uniform iimage2D u_flagImg;
layout (binding = 3,    r8) uniform  image2D u_turbImg;

layout (binding = 1) uniform sampler2D u_prevTurbTex;

// Uniform buffer for better read-only performance
layout (binding = 0, std140) uniform Constants {
    int u_maxGeoPixels;
    int u_maxAirPixels;
    int u_screenSize;
    float u_liftC;
    float u_dragC;
    float u_windframeSize;
    float u_sliceSize;
    float u_windSpeed;
    float u_dt;
    int u_slice;
    float u_sliceZ;
    uint u_debug;
};

layout (binding = 0, std430) restrict buffer GeoPixels {
    int u_geoCount;
    int u_GeoPixels_pad0;
    int u_GeoPixels_pad1;
    int u_GeoPixels_pad2;
    GeoPixel u_geoPixels[];
};

layout (binding = 1, std430) restrict buffer AirPixels {
    int u_airCount;
    int u_AirPixels_pad0;
    int u_AirPixels_pad1;
    int u_AirPixels_pad2;
    AirPixel u_airPixels[];
};

layout (binding = 2, std430) restrict buffer PrevAirPixels {
    int u_prevAirCount;
    int u_PrevAirPixels_pad0;
    int u_PrevAirPixels_pad1;
    int u_PrevAirPixels_pad2;
    AirPixel u_prevAirPixels[];
};

layout (binding = 3, std430) restrict buffer AirGeoMap {
    coherent AirGeoMapElement u_airGeoMap[];
};

layout (binding = 4, std430) restrict buffer Results {
    Result u_results[];
};

// Shared ----------------------------------------------------------------------

shared vec3 accumulationArray[gl_WorkGroupSize.x];

// Functions -------------------------------------------------------------------

vec2 windToScreen(vec2 wind) {
    return (wind / u_windframeSize + 0.5f) * float(u_screenSize);
}

float screenToWindDist(float screenDist) {
    return screenDist / float(u_screenSize) * u_windframeSize;
}

bool isScreenTurbulent(vec2 screenPos) {
    return texture2D(u_prevTurbTex, screenPos / u_screenSize).r > 0.0f;    
}

bool isWindTurbulent(vec2 windPos) {
    return isScreenTurbulent(windToScreen(windPos));
}

void setScreenTurbulent(vec2 screenPos) {
    imageStore(u_turbImg, ivec2(screenPos * 0.25f), vec4(1.0f, 0.0f, 0.0f, 0.0f));    
}

void setWindTurbulent(vec2 windPos) {
    setScreenTurbulent(windToScreen(windPos));
}

void accumulate() {
    uint workI = gl_LocalInvocationID.x;
    for (uint n = gl_WorkGroupSize.x / 2; n > 0; n /= 2) {
        barrier();
        if (workI < n) accumulationArray[workI] += accumulationArray[workI + n];
    }
}

void main() {
    int workI = int(gl_LocalInvocationID.x);

    float pixelArea = screenToWindDist(1.0f);
    pixelArea *= pixelArea;

    vec3 totalDrag = vec3(0.0f);
    vec3 totalTorq = vec3(0.0f);

    for (int geoI = workI; geoI < u_geoCount; geoI += int(gl_WorkGroupSize.x)) {

        vec2 geoWindPos = u_geoPixels[geoI].windPos;
        vec3 geoNormal = u_geoPixels[geoI].normal.xyz;
        ivec2 geoTexCoord = u_geoPixels[geoI].texCoord; // Need exact texture coord because rasterization math and our wind-to-screen math don't always align
        vec2 geoScreenPos = windToScreen(geoWindPos);
        geoScreenPos = clamp(geoScreenPos, vec2(geoTexCoord), vec2(geoTexCoord + 1)); // necessary for edge cases

        bool shouldSpawn = geoNormal.z >= k_minNormalZ && geoNormal.z <= k_maxNormalZ;
        bool shouldSearch = true;
        
        // If geo is in turbulence, forget it
        if (k_doTurbulence && isScreenTurbulent(geoScreenPos)) {
            shouldSearch = false;
            shouldSpawn = false;
        }

        // Look for existing air pixel
        if (shouldSearch) {
            vec2 screenPos = geoScreenPos;
            ivec2 pixel = geoTexCoord;
            vec2 screenDir = normalize(geoNormal.xy);
            vec2 corner; if (k_doLineSearch) corner = step(vec2(0.0f), screenDir);
            float totalDist = 0.0f;

            // Search along line in direction of geo normal
            while (true) {            
                if (k_doLineSearch) {
                    // TODO: optimize
                    vec2 delta = corner - (screenPos - vec2(pixel));
                    vec2 dist = abs(delta / screenDir);
                    if (dist.x < dist.y) {
                        screenPos += screenDir * dist.x;
                        pixel.x += int(sign(screenDir.x));
                        totalDist += screenToWindDist(dist.x);
                    }
                    else {
                        screenPos += screenDir * dist.y;
                        pixel.y += int(sign(screenDir.y));
                        totalDist += screenToWindDist(dist.y);
                    }
                }
                else {
                    screenPos += screenDir;
                    pixel = ivec2(screenPos);
                    totalDist += screenToWindDist(1.0f);
                }

                if (totalDist > k_maxSearchDist) {
                    break;
                }

                // If find turbulence, stop looking and mark turbulence
                if (k_doTurbulence && isScreenTurbulent(screenPos)) {
                    // Write turbulence pixel half way between found turbulence and geometry
                    setScreenTurbulent((geoScreenPos + screenPos) * 0.5f);

                    shouldSpawn = false;
                    break;
                }

                vec4 color = imageLoad(u_fboImg, pixel);

                // Visualize the search
                if (bool(u_debug)) {
                    //imageStore(u_fboImg, pixel, vec4(color.r, color.g, 0.5f, color.a));
                }

                if (color.r != 0.0f) { // we found a geo pixel
                    break;
                }
                if (color.g != 0.0f) { // we found an air pixel
                    int airI = imageLoad(u_flagImg, pixel).x;               
                    if (airI != 0) { // TODO: this should not be necessary, just here for sanity
                        --airI;

                        // If past turbulence distance, set air as turbulent and mark turbulance
                        if (k_doTurbulence && totalDist > k_turbulenceDist) {
                            // Set air pixel to be turbulent
                            u_airPixels[airI].velocity.w = 1.0f;
                            // Don't need to write turbulence at air because it happens in move shader
                            // Write turbulence pixel half way between air and geometry
                            setScreenTurbulent((geoScreenPos + screenPos) * 0.5f);
                            
                            shouldSpawn = false;
                            break;
                        }

                        int mapI = atomicAdd(u_airGeoMap[airI].geoCount, 1);
                        if (mapI >= MAX_GEO_PER_AIR) {
                            break;
                        }
                        u_airGeoMap[airI].geoIndices[mapI] = geoI;

                        shouldSpawn = false;   
                        break;
                    }
                }
            }
        }

        // Overwrite flag image with geometry index
        imageStore(u_flagImg, geoTexCoord, ivec4(geoI + 1, 0, 0, 0));
    
        // Make a new air pixel
        if (shouldSpawn) {
            int airI = atomicAdd(u_airCount, 1);
            if (airI >= u_maxAirPixels) {
                continue;
            }

            u_airGeoMap[airI].geoCount = 1;
            u_airGeoMap[airI].geoIndices[0] = geoI;

            vec2 airWindPos = geoWindPos;
            vec3 refl = reflect(vec3(0.0f, 0.0f, -1.0f), geoNormal);
            vec3 airVelocity = refl * u_windSpeed;

            u_airPixels[airI].windPos = airWindPos;
            u_airPixels[airI].velocity = vec4(airVelocity, 0.0f);
            u_airPixels[airI].backforce = vec2(0.0f);

            // Draw to fbo to avoid another draw later, only necessary for seeing the results immediately
            if (bool(u_debug)) {
                vec4 color = imageLoad(u_fboImg, geoTexCoord);
                color.g = k_inactiveVal;
                imageStore(u_fboImg, geoTexCoord, color);
            }

            // Calculate drag
            float dragFactor = 0.5f * k_airDensity * u_windSpeed * u_windSpeed * pixelArea; // the area "angle" and dot product cancel out
            dragFactor *= u_dragC;
            vec3 drag = -geoNormal * dragFactor;

            // Calculate torque
            vec3 torq = cross(vec3(geoWindPos, u_sliceZ), drag); // TODO: is this right

            totalDrag += drag;
            totalTorq += torq;
        }

        // Color active geo pixels more brightly
        if (bool(u_debug) && k_distinguishActivePixels) {
            vec4 color = imageLoad(u_fboImg, geoTexCoord);
            color.r = 1.0f;
            imageStore(u_fboImg, geoTexCoord, color);
        }
    }

    // Zero results
    if (workI == 0) {
        u_results[u_slice].lift = vec4(0.0f);
        u_results[u_slice].drag = vec4(0.0f);
        u_results[u_slice].torq = vec4(0.0f);
    }

    // Accumulate drag
    accumulationArray[workI] = totalDrag;
    accumulate();
    if (workI == 0) u_results[u_slice].drag.xyz += accumulationArray[0];
    
    // Accumulate torque
    accumulationArray[workI] = totalTorq;
    accumulate();
    if (workI == 0) u_results[u_slice].torq.xyz += accumulationArray[0];
}