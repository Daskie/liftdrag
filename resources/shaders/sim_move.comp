#version 450 core

#define MAX_GEO_PER_AIR 3



layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

// Types -----------------------------------------------------------------------

struct GeoPixel {
    vec2 windPos;
    ivec2 texCoord;
    vec4 normal;
};

struct AirPixel {
    vec2 windPos;
    vec2 backForce;
    vec4 velocity;
};

struct AirGeoMapElement {
    int geoCount;
    int geoIndices[MAX_GEO_PER_AIR];
};

// Constants -------------------------------------------------------------------

const bool k_distinguishActivePixels = true; // Makes certain "active" pixels brigher for visual clarity, but lowers performance

const float k_maxSearchDist = 0.2f; // In wind space
const float k_turbulenceDist = 0.0225f;

const bool k_doLineSearch = true;

const bool k_ignoreEdges = false;

// Uniforms --------------------------------------------------------------------

layout (binding = 0, rgba8) uniform image2D u_fboImg;
layout (binding = 3, r32i) uniform iimage2D u_flagImg;
layout (binding = 4, rgba8) uniform image2D u_sideImg;

layout (binding = 0, std430) restrict buffer SSBO {
    int u_swap;
    int u_geoCount;
    int u_airCount[2];
    int u_maxGeoPixels;
    int u_maxAirPixels;
    int u_screenSize;
    float u_windframeSize;
    float u_sliceSize;
    float u_windSpeed;
    float u_dt;
    int u_slice;
    float u_sliceZ;
    uint u_debug;
    int u_padding0;
    int u_padding1;
    vec4 u_lift;
    vec4 u_drag;
};

// Done this way because having a lot of large static sized arrays makes shader compilation super slow for some reason
layout (binding = 1, std430) buffer GeoPixels { // TODO: should be restrict?
    GeoPixel u_geoPixels[];
};
layout (binding = 2, std430) buffer AirPixels { // TODO: should be restrict?
    AirPixel u_airPixels[];
};
layout (binding = 3, std430) buffer AirGeoMap { // TODO: should be restrict?
    AirGeoMapElement u_airGeoMap[];
};

// Shared ----------------------------------------------------------------------

shared vec3 accumulationArray[gl_WorkGroupSize.x];

// Functions -------------------------------------------------------------------

vec2 windToScreen(vec2 wind) {
    return (wind / (u_windframeSize * 0.5f) * 0.5f + 0.5f) * float(u_screenSize);
}

float screenToWindDist(float screenDist) {
    return 2.0f * screenDist / float(u_screenSize) * (u_windframeSize * 0.5f);
}

void accumulate() {
    uint workI = gl_LocalInvocationID.x;
    for (uint n = gl_WorkGroupSize.x / 2; n > 0; n /= 2) {
        barrier();
        if (workI < n) accumulationArray[workI] += accumulationArray[workI + n];
    }
}

void main() {
    int workI = int(gl_LocalInvocationID.x);

    vec3 totalLift = vec3(0.0f);
    vec3 totalDrag = vec3(0.0f);

    for (int airI = workI; airI < u_airCount[u_swap]; airI += int(gl_WorkGroupSize.x)) {

        vec2 airWindPos = u_airPixels[airI + u_swap * u_maxAirPixels].windPos;
        vec3 airVelocity = u_airPixels[airI + u_swap * u_maxAirPixels].velocity.xyz;
        //float turbulence = u_airPixels[airI + u_swap * k_maxAirPixels].windPos.w;

        vec2 backForce = vec2(0.0f);
        float drag = 0.0f;

        int geoCount = u_airGeoMap[airI].geoCount;
        
        // If no geo found for this air, search for geo
        if (geoCount == 0) {
            vec2 screenPos = windToScreen(airWindPos.xy);
            ivec2 pixel = ivec2(screenPos);
            vec2 searchDir = u_airPixels[airI + u_swap * u_maxAirPixels].backForce.xy;
            if (searchDir != vec2(0.0f)) {                
                vec2 screenDir = normalize(searchDir);
                vec2 corner; if (k_doLineSearch) corner = step(vec2(0.0f), screenDir);
                float totalDist = 0.0f;
                while (true) {            
                    if (k_doLineSearch) {
                        // TODO: optimize
                        vec2 delta = corner - (screenPos - vec2(pixel));
                        vec2 dist = abs(delta / screenDir);
                        if (dist.x < dist.y) {
                            screenPos += screenDir * dist.x;
                            pixel.x += int(sign(screenDir.x));
                            totalDist += screenToWindDist(dist.x);
                        }
                        else {
                            screenPos += screenDir * dist.y;
                            pixel.y += int(sign(screenDir.y));
                            totalDist += screenToWindDist(dist.y);
                        }
                    }
                    else {
                        screenPos += screenDir;
                        pixel = ivec2(screenPos);
                        totalDist += screenToWindDist(1.0f);
                    }

                    if (totalDist > k_maxSearchDist) {
                        break;
                    }

                    vec4 color = imageLoad(u_fboImg, pixel);

                    // Visualize the search
                    if (bool(u_debug)) {
                        //imageStore(u_fboImg, pixel, vec4(color.r, color.g, 0.5f, color.a));
                    }

                    if (color.r != 0.0f) { // we found an geo pixel
                        int geoI = imageLoad(u_flagImg, pixel).x;
                        if (geoI != 0) { // TODO: this should not be necessary, just here for sanity
                            --geoI;

                            ++geoCount;
                            ++u_airGeoMap[airI].geoCount;
                            u_airGeoMap[airI].geoIndices[0] = geoI;                   
 
                            break;
                        }
                    }
                }
            }
        }

        // Color active air pixels more brightly
        if (bool(u_debug) && k_distinguishActivePixels && geoCount > 0) {
            ivec2 texCoord = ivec2(windToScreen(airWindPos.xy));
            vec4 color = imageLoad(u_fboImg, texCoord);
            color.g = 1.0f;
            //color.b = turbulence;
            imageStore(u_fboImg, texCoord, color);

            if (!k_ignoreEdges || abs(airWindPos.x) <= 0.5f) {
                ivec2 sideTexCoord = ivec2(windToScreen(vec2(u_sliceZ, airWindPos.y)));
                color = imageLoad(u_sideImg, sideTexCoord);
                color.g = 1.0f;
                //color.b = turbulence;
                imageStore(u_sideImg, sideTexCoord, color);
            }
        }

        // TODO: figure out these constants
        float massDensity = 1.0f;
        float flowVelocity = u_windSpeed; // TODO: is this correct?
        float dragC = 1.0f;
        float area = screenToWindDist(1.0f);
        area = area * area;

        // For each associated geo pixel, update backforce, lift, and drag
        // TODO: actually take multiple geo pixels into account
        for (int mapI = 0; mapI < geoCount; ++mapI) {
            int geoI = u_airGeoMap[airI].geoIndices[mapI];

            // Calculate backforce
            vec2 geoWindPos = u_geoPixels[geoI].windPos;
            vec3 geoNormal = u_geoPixels[geoI].normal.xyz;
            float dist = distance(airWindPos.xy, geoWindPos.xy);
            backForce += normalize(-geoNormal.xy) * dist * dist  * 500.0f; // TODO: magic number

            //if (distance(geoWindPos, airWindPos) >= k_turbulenceDist) {
            //    turbulence = 1.0f;
            //}

            // Calculate drag
            drag += 0.5f * massDensity * flowVelocity * flowVelocity * dragC * area * max(geoNormal.z, 0.0f) * u_sliceSize * 100.0f; // TODO: magic number
        }
        // Average
        if (geoCount > 0) {
            float invGeoCount = 1.0f / float(geoCount);
            backForce *= invGeoCount;
            drag *= invGeoCount;
        }
        // Add to total
        vec2 lift = -backForce * 0.0001f;
        totalLift.xy += lift;
        totalDrag.x += drag;

        // Update velocity
        airVelocity.xy += backForce;
        airVelocity.z = -u_windSpeed;
        airVelocity = normalize(airVelocity) * u_windSpeed;

        // Update location
        airWindPos.xy += airVelocity.xy * u_dt;

        u_airPixels[airI + u_swap * u_maxAirPixels].windPos = airWindPos;//, turbulence);
        u_airPixels[airI + u_swap * u_maxAirPixels].velocity = vec4(airVelocity, 0.0f);
        u_airPixels[airI + u_swap * u_maxAirPixels].backForce = backForce;
    }

    // Accumulate lift
    accumulationArray[workI] = totalLift;
    accumulate();
    if (workI == 0) u_lift.xyz = accumulationArray[0];

    // Accumulate drag
    accumulationArray[workI] = totalDrag;
    accumulate();
    if (workI == 0) u_drag.xyz = accumulationArray[0];
}