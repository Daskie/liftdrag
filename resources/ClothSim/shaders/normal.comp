#version 450 core

#extension GL_NV_shader_atomic_float : enable

layout (local_size_x = WORK_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

// Types -----------------------------------------------------------------------

struct Vertex {
    vec3 position;
    float mass;
    vec3 normal;
    int group;
    vec3 force;
    float _0;
    vec3 prevPosition;
    float _1;
};

// Constants -------------------------------------------------------------------

const int k_workGroupSize = WORK_GROUP_SIZE;

// Uniforms --------------------------------------------------------------------

uniform int u_vertexCount;
uniform int u_indexCount;

layout (binding = 0, std430) restrict buffer Vertices {
    Vertex u_vertices[];
};

layout (binding = 1, std430) restrict buffer Indices {
    uint u_indices[];
};

// Functions -------------------------------------------------------------------

vec3 safeNormalize(vec3 v) {
    float d = dot(v, v);
    return d > 0.0f ? v / sqrt(d) : vec3(0.0f);
}

void calcNorm(uint pi1, uint pi2, uint pi3) {
    vec3 pos1 = u_vertices[pi1].position;
    vec3 pos2 = u_vertices[pi2].position;
    vec3 pos3 = u_vertices[pi3].position;
    vec3 norm = cross(pos2 - pos1, pos3 - pos1); // normalization comes later
    atomicAdd(u_vertices[pi1].normal.x, norm.x);
    atomicAdd(u_vertices[pi1].normal.y, norm.y);
    atomicAdd(u_vertices[pi1].normal.z, norm.z);
    atomicAdd(u_vertices[pi2].normal.x, norm.x);
    atomicAdd(u_vertices[pi2].normal.y, norm.y);
    atomicAdd(u_vertices[pi2].normal.z, norm.z);
    atomicAdd(u_vertices[pi3].normal.x, norm.x);
    atomicAdd(u_vertices[pi3].normal.y, norm.y);
    atomicAdd(u_vertices[pi3].normal.z, norm.z);
}

void main() {
    int workI = int(gl_LocalInvocationIndex);

    // Zero normals
    for (int pi = workI; pi < u_vertexCount; pi += k_workGroupSize) {
        u_vertices[pi].normal = vec3(0.0f);
    }
    barrier();
    // Calculate new normals
    int triCount = u_indexCount / 3;
    for (int ti = workI; ti < triCount; ti += k_workGroupSize) {
        int ii = ti * 3;
        calcNorm(u_indices[ii + 0], u_indices[ii + 1], u_indices[ii + 2]);
    }
    barrier();
    // Normalize new normals
    for (int pi = workI; pi < u_vertexCount; pi += k_workGroupSize) {
        u_vertices[pi].normal = safeNormalize(u_vertices[pi].normal);
    }
}