#version 450 core

#define MAX_GEO_PER_AIR 3

#ifndef DEBUG
#define DEBUG false
#endif

#ifndef DO_WIND_SHADOW
#define DO_WIND_SHADOW false
#endif

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// Types -----------------------------------------------------------------------

struct Result {
    vec4 lift;
    vec4 drag;
    vec4 torq;
};

struct GeoPixel {
    vec2 windPos;
    ivec2 texCoord;
    vec4 normal;
};

struct AirPixel {
    vec2 windPos;
    vec2 velocity;
    vec2 backforce;
    vec2 turbulence; // x component is turbulence
};

struct AirGeoMapElement {
    int geoCount;
    int geoIndices[MAX_GEO_PER_AIR];
};

// Constants -------------------------------------------------------------------

const uint k_workGroupSize = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;
const bool k_debug = DEBUG;
const float k_airDensity = 1.0f;
const bool k_doWindShadow = DO_WIND_SHADOW;

// Uniforms --------------------------------------------------------------------

layout (binding = 0,        rgba8) uniform image2D u_fboImg;
layout (binding = 1, rgba16_snorm) uniform image2D u_fboNormImg;
layout (binding = 3,           r8) uniform image2D u_turbImg;
layout (binding = 4,           r8) uniform image2D u_prevTurbImg;
layout (binding = 5,           r8) uniform image2D u_shadImg;

layout (binding = 2) uniform sampler2D u_shadTex;

// Uniform buffer for better read-only performance
layout (binding = 0, std140) uniform Constants {
    int u_maxGeoPixels;
    int u_maxAirPixels;
    int u_screenSize;
    float u_liftC;
    float u_dragC;
    float u_windframeSize;
    float u_windframeDepth;
    float u_sliceSize;
    float u_turbulenceDist;
    float u_maxSearchDist;
    float u_windShadDist;
    float u_backforceC;
    float u_flowback;
    float u_initVelC;
    float u_windSpeed;
    float u_dt;
    int u_slice;
    float u_sliceZ;
};

layout (binding = 0, std430) restrict buffer GeoPixels {
    coherent int u_geoCount;
    int u_GeoPixels_pad0;
    int u_GeoPixels_pad1;
    int u_GeoPixels_pad2;
    GeoPixel u_geoPixels[];
};

layout (binding = 1, std430) restrict buffer AirPixels {
    int u_airCount;
    int u_AirPixels_pad0;
    int u_AirPixels_pad1;
    int u_AirPixels_pad2;
    AirPixel u_airPixels[];
};

layout (binding = 2, std430) restrict buffer PrevAirPixels {
    int u_prevAirCount;
    int u_PrevAirPixels_pad0;
    int u_PrevAirPixels_pad1;
    int u_PrevAirPixels_pad2;
    AirPixel u_prevAirPixels[];
};

layout (binding = 3, std430) restrict buffer AirGeoMap {
    AirGeoMapElement u_airGeoMap[];
};

layout (binding = 4, std430) restrict buffer Results {
    Result u_results[];
};

// Shared ----------------------------------------------------------------------

shared vec3 s_accumulationArray[k_workGroupSize];

// Functions -------------------------------------------------------------------

vec2 screenToWind(vec2 screen) {
    return (screen / u_screenSize - 0.5f) * u_windframeSize;
}

// Returns one of <1, 0>, <-1, 0>, <0, 1>, <0, -1> corresponding to dir
ivec2 getPixelDelta(vec2 dir) {
    vec2 signs = sign(dir);
    vec2 mags = dir * signs;
    if (mags.y >= mags.x) {
        return ivec2(0, int(signs.y));
    }
    else {
        return ivec2(int(signs.x), 0);
    }
}

float screenToWindDist(float screenDist) {
    return screenDist / float(u_screenSize) * u_windframeSize;
}

bool isScreenInShadow(vec2 screenPos) {
    return texture2D(u_shadTex, screenPos / u_screenSize).r > 0.0f;
}

void accumulate() {
    uint workI = gl_LocalInvocationIndex;
    for (uint n = k_workGroupSize / 2; n > 0; n /= 2) {
        barrier();
        if (workI < n) s_accumulationArray[workI] += s_accumulationArray[workI + n];
    }
}

void main() {
    // TODO: switch back to many work groups if don't need to use shared
    //ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    //if (texCoord.x >= u_screenSize || texCoord.y >= u_screenSize) {
    //    return;
    //}

    int workI = int(gl_LocalInvocationIndex);
    ivec2 workCoord = ivec2(gl_LocalInvocationID.xy);
    s_accumulationArray[gl_LocalInvocationIndex] = vec3(0.0f);

    float pixelArea = screenToWindDist(1.0f);
    pixelArea *= pixelArea;

    vec3 totalDrag = vec3(0.0f);
    vec3 totalTorq = vec3(0.0f);

    // Zero results
    if (workI == 0) {
        u_results[u_slice].lift = vec4(0.0f);
        u_results[u_slice].drag = vec4(0.0f);
        u_results[u_slice].torq = vec4(0.0f);
    }

    ivec2 texCoord;
    for (texCoord.y = workCoord.y; texCoord.y < u_screenSize; texCoord.y += int(gl_WorkGroupSize.y)) {
        for (texCoord.x = workCoord.x; texCoord.x < u_screenSize; texCoord.x += int(gl_WorkGroupSize.x)) {

            // If not geometry, ignore
            vec4 color = imageLoad(u_fboImg, texCoord);
            if (color.r == 0.0f) {
                continue;
            }

            imageStore(u_fboImg, texCoord, vec4(color.r, 0.0f, 0.0f, 0.0f));

            vec2 geoWindPos = screenToWind(vec2(texCoord) + color.gb);
            vec3 geoNormal = imageLoad(u_fboNormImg, texCoord).xyz;

            // Set wind shadow
            if (k_doWindShadow && geoNormal.z < 0.0f) { // TODO: do we want a minimum angle for wind shadow?
                imageStore(u_shadImg, texCoord / 4, vec4(u_slice * u_sliceSize / u_windframeDepth, 0.0f, 0.0f, 0.0f));
            }
            // Calculate drag and torque
            else if (!isScreenInShadow(vec2(texCoord) + 0.5f)) {
                float dragFactor = 0.5f * k_airDensity * u_windSpeed * u_windSpeed * pixelArea * geoNormal.z;
                dragFactor *= u_dragC;
                vec3 drag = -geoNormal * dragFactor;
                totalDrag += drag;

                vec3 torq = cross(vec3(geoWindPos, u_sliceZ), drag); // TODO: is this right
                totalTorq += torq;
            }

            ivec2 nextTexCoord = texCoord + getPixelDelta(geoNormal.xy);
            vec4 nextColor = imageLoad(u_fboImg, nextTexCoord);
            if (nextColor.r != 0.0f) {
                continue;
            }

            int geoI = atomicAdd(u_geoCount, 1);
            if (geoI >= u_maxGeoPixels) {
                continue;
            }

            u_geoPixels[geoI].windPos = geoWindPos.xy;
            u_geoPixels[geoI].normal = vec4(geoNormal, 0.0f);
            u_geoPixels[geoI].texCoord = texCoord;
        }
    }

    // TODO: probably move this to dedicated gl call
    // Copy turbulence textue to previous turbulence texture
    for (texCoord.y = workCoord.y; texCoord.y < u_screenSize / 4; texCoord.y += int(gl_WorkGroupSize.y)) {
        for (texCoord.x = workCoord.x; texCoord.x < u_screenSize / 4; texCoord.x += int(gl_WorkGroupSize.x)) {
            imageStore(u_prevTurbImg, texCoord, imageLoad(u_turbImg, texCoord));
        }
    }

    // Accumulate drag
    s_accumulationArray[workI] = totalDrag;
    accumulate();
    if (workI == 0) u_results[u_slice].drag.xyz += s_accumulationArray[0];

    // Accumulate torque
    s_accumulationArray[workI] = totalTorq;
    accumulate();
    if (workI == 0) u_results[u_slice].torq.xyz += s_accumulationArray[0];
}