#version 450 core

#extension GL_NV_shader_atomic_float : enable

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Types -----------------------------------------------------------------------

struct Result {
    vec4 lift;
    vec4 drag;
    vec4 torq;
};

struct GeoPixel {
    vec2 windPos;
    ivec2 texCoord;
    vec4 normal;
};

struct SoftVertex {
    vec3 position;
    float mass;
    vec3 normal;
    int group;
    vec3 prevPosition;
    float _0;
    vec3 force0; // lift
    float _1;
    vec3 force1; // drag
    float _2;
};

// Constants -------------------------------------------------------------------

// External
const bool k_debug = DEBUG;
const bool k_doWindShadow = DO_WIND_SHADOW;
const bool k_doCloth = DO_CLOTH;

const int k_workGroupSize = int(gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z);
const ivec2 k_workGroupSize2D = ivec2(gl_WorkGroupSize.xy);
const uint k_geoBit = 1, k_airBit = 2, k_activeBit = 4;
const float k_airDensity = 1.0f;

// Uniforms --------------------------------------------------------------------

layout (binding = 0,      rgba8ui) uniform restrict uimage2D u_frontImg;
layout (binding = 1, rgba16_snorm) uniform restrict  image2D u_fboNormImg;
layout (binding = 5,           r8) uniform restrict  image2D u_shadImg;
layout (binding = 6,        r32ui) uniform restrict uimage2D u_indexImg;

layout (binding = 1) uniform sampler2D u_prevTurbTex;
layout (binding = 2) uniform sampler2D u_shadTex;

// Uniform buffer for better read-only performance
layout (binding = 0, std140) uniform Constants {
    int u_maxGeoPixels;
    int u_maxAirPixels;
    int u_texSize;
    float u_liftC;
    float u_dragC;
    float u_windframeSize;
    float u_windframeDepth;
    float u_sliceSize;
    float u_turbulenceDist;
    float u_maxSearchDist;
    float u_windShadDist;
    float u_backforceC;
    float u_flowback;
    float u_initVelC;
    float u_windSpeed;
    float u_dt;
    int u_slice;
    float u_sliceZ;
    float u_pixelSize;
};

layout (binding = 0, std430) restrict buffer GeoPixels {
    coherent int u_geoCount;
    int u_GeoPixels_pad0;
    int u_GeoPixels_pad1;
    int u_GeoPixels_pad2;
    GeoPixel u_geoPixels[];
};

layout (binding = 4, std430) restrict buffer Results {
    Result u_results[];
};

// Only present if doing cloth
layout (binding = 5, std430) restrict buffer SoftVertices {
    SoftVertex u_softVertices[];
};

// Only present if doing cloth
layout (binding = 6, std430) restrict buffer Indices {
    uint u_indices[];
};

// Shared ----------------------------------------------------------------------

shared vec3 s_accumulationArray[k_workGroupSize];

// Invocation variables --------------------------------------------------------

vec3 i_drag = vec3(0.0f);
vec3 i_torq = vec3(0.0f);

// Functions -------------------------------------------------------------------

vec2 windToTex(vec2 windPos) {
    return (windPos / u_windframeSize + 0.5f) * float(u_texSize);
}

vec2 texToWind(vec2 texPos) {
    return (texPos / u_texSize - 0.5f) * u_windframeSize;
}

bool isTexInShadow(vec2 texPos) {
    return texture2D(u_shadTex, texPos / u_texSize).r > 0.0f;
}

// Returns one of <1, 0>, <-1, 0>, <0, 1>, <0, -1> corresponding to dir
ivec2 getPixelDelta(vec2 dir) {
    vec2 signs = sign(dir);
    vec2 mags = dir * signs;
    if (mags.y >= mags.x) {
        return ivec2(0, int(signs.y));
    }
    else {
        return ivec2(int(signs.x), 0);
    }
}

void accumulate() {
    int workI = int(gl_LocalInvocationIndex);
    for (int n = k_workGroupSize / 2; n > 0; n /= 2) {
        barrier();
        if (workI < n) s_accumulationArray[workI] += s_accumulationArray[workI + n];
    }
}

// Applies given lift and drag forces to cloth at given texture coordinate
void applySoftForce(ivec2 texCoord, vec3 lift, vec3 drag) {
    uint ii = imageLoad(u_indexImg, texCoord).x * 3;
    if (ii == 0) {
        return;
    }
    --ii;
    lift *= (1.0f / 3.0f);
    drag *= (1.0f / 3.0f);
    uint i0 = u_indices[ii + 0];
    uint i1 = u_indices[ii + 1];
    uint i2 = u_indices[ii + 2];
    if (lift != vec3(0.0f)) {
        atomicAdd(u_softVertices[i0].force0.x, lift.x);
        atomicAdd(u_softVertices[i0].force0.y, lift.y);
        atomicAdd(u_softVertices[i0].force0.z, lift.z);
        atomicAdd(u_softVertices[i1].force0.x, lift.x);
        atomicAdd(u_softVertices[i1].force0.y, lift.y);
        atomicAdd(u_softVertices[i1].force0.z, lift.z);
        atomicAdd(u_softVertices[i2].force0.x, lift.x);
        atomicAdd(u_softVertices[i2].force0.y, lift.y);
        atomicAdd(u_softVertices[i2].force0.z, lift.z);
    }
    if (drag != vec3(0.0f)) {
        atomicAdd(u_softVertices[i0].force1.x, drag.x);
        atomicAdd(u_softVertices[i0].force1.y, drag.y);
        atomicAdd(u_softVertices[i0].force1.z, drag.z);
        atomicAdd(u_softVertices[i1].force1.x, drag.x);
        atomicAdd(u_softVertices[i1].force1.y, drag.y);
        atomicAdd(u_softVertices[i1].force1.z, drag.z);
        atomicAdd(u_softVertices[i2].force1.x, drag.x);
        atomicAdd(u_softVertices[i2].force1.y, drag.y);
        atomicAdd(u_softVertices[i2].force1.z, drag.z);
    }
}

void prospect(ivec2 texCoord) {
    // If not geometry, ignore
    uvec4 color = imageLoad(u_frontImg, texCoord);
    if ((color.r & k_geoBit) == 0) {
        return;
    }

    vec2 geoWindPos = texToWind(vec2(texCoord) + color.gb / 255.0f);
    vec3 geoNormal = imageLoad(u_fboNormImg, texCoord).xyz;

    // Set wind shadow
    if (!k_doCloth && k_doWindShadow && geoNormal.z < 0.0f) { // TODO: do we want a minimum angle for wind shadow?
        imageStore(u_shadImg, texCoord / 4, vec4(u_slice * u_sliceSize / u_windframeDepth, 0.0f, 0.0f, 0.0f));
    }
    // Calculate drag and torque
    else if (k_doCloth || !isTexInShadow(vec2(texCoord) + 0.5f)) {
        float dragFactor = 0.5f * k_airDensity * u_windSpeed * u_windSpeed * u_pixelSize * u_pixelSize * geoNormal.z;
        dragFactor *= u_dragC;
        i_drag += -geoNormal * dragFactor;

        i_torq += cross(vec3(geoWindPos, u_sliceZ), i_drag);

        if (k_doCloth) {
            applySoftForce(texCoord, vec3(0.0f), i_drag);
        }
    }

    // Check if we're on edge
    bool onEdge = false;
    ivec2 nextTexCoord = texCoord + getPixelDelta(geoNormal.xy);
    uvec4 nextColor = imageLoad(u_frontImg, nextTexCoord);
    if ((nextColor.r & k_geoBit) == 0) {
        onEdge = true;
    }
    if (false && k_doCloth && !onEdge) {
        nextTexCoord = texCoord + getPixelDelta(-geoNormal.xy);
        nextColor = imageLoad(u_frontImg, nextTexCoord);
        if ((nextColor.r & k_geoBit) == 0) {
            onEdge = true;
        }
    }
    if (!onEdge) {
        return;
    }

    // Add geo pixel
    int geoI = atomicAdd(u_geoCount, 1);
    if (geoI >= u_maxGeoPixels) {
        return;
    }
    u_geoPixels[geoI].windPos = geoWindPos.xy;
    u_geoPixels[geoI].normal = vec4(geoNormal, 0.0f);
    u_geoPixels[geoI].texCoord = texCoord;
}

void main() {
    int workI = int(gl_LocalInvocationIndex);
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);

    // Zero accumulation array
    if (!k_doCloth) {
        s_accumulationArray[workI] = vec3(0.0f);
    }

    // If inside texture
    if (all(lessThan(texCoord, ivec2(u_texSize)))) {
        prospect(texCoord);
    }

    // Accumulate and save results
    if (!k_doCloth) {
        // Accumulate drag
        s_accumulationArray[workI] = i_drag;
        accumulate();
        if (workI == 0) u_results[u_slice].drag.xyz += s_accumulationArray[0];

        // Accumulate torque
        s_accumulationArray[workI] = i_torq;
        accumulate();
        if (workI == 0) u_results[u_slice].torq.xyz += s_accumulationArray[0];
    }
}