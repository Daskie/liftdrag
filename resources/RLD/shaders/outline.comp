#version 450 core

#extension GL_NV_shader_atomic_float : enable

layout (local_size_x = WORK_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

// Types -----------------------------------------------------------------------

struct GeoPixel {
    vec2 windPos;
    ivec2 texCoord;
    vec4 normal;
};

struct AirPixel {
    vec2 windPos;
    vec2 velocity;
    vec2 backforce;
    vec2 turbulence; // x component is turbulence
};

// Constants -------------------------------------------------------------------

// External
const bool k_debug = DEBUG;
const bool k_distinguishActivePixels = DISTINGUISH_ACTIVE_PIXELS; // Makes certain "active" pixels brigher for visual clarity, but lowers performance
const bool k_doTurbulence = DO_TURBULENCE;
const bool k_doCloth = DO_CLOTH;

const int k_workGroupSize = int(gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z);
const uint k_geoBit = 1, k_airBit = 2, k_activeBit = 4;
const float k_minNormalZ = 1.0f / 1000000.0f;
const float k_maxNormalZ = 1.0f - k_minNormalZ;

// Uniforms --------------------------------------------------------------------

layout (binding = 0,      rgba8ui) uniform restrict uimage2D u_frontImg;
layout (binding = 2,         r32i) uniform restrict iimage2D u_flagImg;
layout (binding = 3,           r8) uniform restrict  image2D u_turbImg;

layout (binding = 1) uniform sampler2D u_prevTurbTex;

// Uniform buffer for better read-only performance
layout (binding = 0, std140) uniform Constants {
    int u_maxGeoPixels;
    int u_maxAirPixels;
    int u_screenSize;
    float u_liftC;
    float u_dragC;
    float u_windframeSize;
    float u_windframeDepth;
    float u_sliceSize;
    float u_turbulenceDist;
    float u_maxSearchDist;
    float u_windShadDist;
    float u_backforceC;
    float u_flowback;
    float u_initVelC;
    float u_windSpeed;
    float u_dt;
    int u_slice;
    float u_sliceZ;
    float u_pixelSize;
};

layout (binding = 0, std430) restrict buffer GeoPixels {
    coherent int u_geoCount;
    int u_GeoPixels_pad0;
    int u_GeoPixels_pad1;
    int u_GeoPixels_pad2;
    GeoPixel u_geoPixels[];
};

layout (binding = 1, std430) restrict buffer AirPixels {
    int u_airCount;
    int u_AirPixels_pad0;
    int u_AirPixels_pad1;
    int u_AirPixels_pad2;
    AirPixel u_airPixels[];
};

layout (binding = 3, std430) restrict buffer AirGeoMap {
    int u_airGeoMap[];
};

// Functions -------------------------------------------------------------------

vec2 windToScreen(vec2 wind) {
    return (wind / u_windframeSize + 0.5f) * float(u_screenSize);
}

vec2 screenToWind(vec2 screen) {
    return (screen / u_screenSize - 0.5f) * u_windframeSize;
}

float screenToWindDist(float screenDist) {
    return screenDist / float(u_screenSize) * u_windframeSize;
}

bool isScreenTurbulent(vec2 screenPos) {
    return texture2D(u_prevTurbTex, screenPos / u_screenSize).r > 0.0f;
}

bool isWindTurbulent(vec2 windPos) {
    return isScreenTurbulent(windToScreen(windPos));
}

void setScreenTurbulent(vec2 screenPos) {
    imageStore(u_turbImg, ivec2(screenPos * 0.25f), vec4(1.0f, 0.0f, 0.0f, 0.0f));
}

void setWindTurbulent(vec2 windPos) {
    setScreenTurbulent(windToScreen(windPos));
}

// Looks for a geo pixel from given point in given direction
// searchDir is normalized xy in screen space
// returns airI if air is found, -1 if nothing is found, and -2 if turbulence is found
int findAir(vec2 geoScreenPos, ivec2 geoTexCoord, vec2 searchDir) {
    vec2 searchScreenPos = geoScreenPos;
    ivec2 searchPixel = geoTexCoord;
    vec2 corner = step(vec2(0.0f), searchDir);
    float totalDist = 0.0f;

    // Check for air on geometry
    uvec4 color = imageLoad(u_frontImg, searchPixel);
    if ((color.r & k_airBit) != 0) {
        int airI = imageLoad(u_flagImg, searchPixel).x;
        if (airI != 0) { // TODO: this should not be necessary, just here for sanity
            return airI - 1;
        }
    }

    // Search along line in searchDir
    while (true) {
        vec2 delta = corner - (searchScreenPos - vec2(searchPixel));
        vec2 dist = abs(delta / searchDir);
        if (dist.x < dist.y) {
            searchScreenPos += searchDir * dist.x;
            searchPixel.x += int(sign(searchDir.x));
            totalDist += screenToWindDist(dist.x);
        }
        else {
            searchScreenPos += searchDir * dist.y;
            searchPixel.y += int(sign(searchDir.y));
            totalDist += screenToWindDist(dist.y);
        }

        if (totalDist > u_maxSearchDist) {
            return -1;
        }

        // If find turbulence, stop looking and mark turbulence
        if (k_doTurbulence && isScreenTurbulent(searchScreenPos)) {
            // Write turbulence pixel half way between found turbulence and geometry
            setScreenTurbulent((geoScreenPos + searchScreenPos) * 0.5f);
            return -2;
        }

        color = imageLoad(u_frontImg, searchPixel);

        if ((color.r & k_geoBit) != 0) { // we found a geo pixel
            return -1;
        }
        if ((color.r & k_airBit) != 0) { // we found an air pixel
            int airI = imageLoad(u_flagImg, searchPixel).x;
            if (airI != 0) { // TODO: this should not be necessary, just here for sanity
                --airI;

                // If past turbulence distance, set air as turbulent and mark turbulance
                if (k_doTurbulence && totalDist > u_turbulenceDist) {
                    // Set air pixel to be turbulent
                    u_airPixels[airI].turbulence.x = 1.0f;
                    return -2;
                }

                return airI;
            }
        }
    }

}

void outline(int geoI) {
    vec2 geoWindPos = u_geoPixels[geoI].windPos;
    vec3 geoNormal = u_geoPixels[geoI].normal.xyz;
    ivec2 geoTexCoord = u_geoPixels[geoI].texCoord; // Need exact texture coord because rasterization math and our wind-to-screen math don't always align
    vec2 geoScreenPos = windToScreen(geoWindPos);
    geoScreenPos = clamp(geoScreenPos, vec2(geoTexCoord), vec2(geoTexCoord + 1)); // necessary for edge cases

    bool shouldSpawn = geoNormal.z >= k_minNormalZ && geoNormal.z <= k_maxNormalZ;
    bool shouldSearch = abs(geoNormal.z) <= k_maxNormalZ;

    // If geo is in turbulence, forget it
    if (k_doTurbulence && isScreenTurbulent(geoScreenPos)) {
        shouldSearch = false;
        shouldSpawn = false;
    }

    // Look for existing air pixel
    if (shouldSearch) {
        vec2 searchDir = normalize(geoNormal.xy);
        int res = findAir(geoScreenPos, geoTexCoord, searchDir);
        shouldSpawn = shouldSpawn && res == -1;
        if (res >= 0) u_airGeoMap[res] = geoI + 1;

        if (k_doCloth) {
            res = findAir(geoScreenPos, geoTexCoord, -searchDir);
            if (res >= 0) u_airGeoMap[res] = geoI + 1;
        }
    }

    barrier();

    // Overwrite flag image with geometry index
    imageStore(u_flagImg, geoTexCoord, ivec4(geoI + 1, 0, 0, 0));

    // Make a new air pixel
    if (shouldSpawn) {
        int airI = atomicAdd(u_airCount, 1);
        if (airI >= u_maxAirPixels) {
            return;
        }

        u_airGeoMap[airI] = geoI + 1;

        vec2 airWindPos = geoWindPos;
        vec3 refl = reflect(vec3(0.0f, 0.0f, -1.0f), geoNormal);
        vec2 airVelocity = refl.xy * u_windSpeed;
        airVelocity *= u_initVelC;

        u_airPixels[airI].windPos = airWindPos;
        u_airPixels[airI].velocity = airVelocity;
        u_airPixels[airI].backforce = vec2(0.0f);
        u_airPixels[airI].turbulence = vec2(0.0f);

        // Draw to fbo to avoid another draw later, only necessary for seeing the results immediately
        if (k_debug) {
            uvec4 color = imageLoad(u_frontImg, geoTexCoord);
            color.g |= k_airBit;
            imageStore(u_frontImg, geoTexCoord, color);
        }
    }

    // Color active geo pixels more brightly
    if (k_debug && k_distinguishActivePixels) {
        uvec4 color = imageLoad(u_frontImg, geoTexCoord);
        color.r |= k_activeBit;
        imageStore(u_frontImg, geoTexCoord, color);
    }
}

void main() {
    int workI = int(gl_LocalInvocationIndex);

    for (int geoI = workI; geoI < u_geoCount; geoI += k_workGroupSize) {
        outline(geoI);
    }
}