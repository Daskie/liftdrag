#version 450 core

#extension GL_NV_shader_atomic_float : enable

layout (local_size_x = WORK_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

// Types -----------------------------------------------------------------------

struct Result {
    vec4 lift;
    vec4 drag;
    vec4 torq;
};

struct GeoPixel {
    vec2 windPos;
    ivec2 texCoord;
    vec4 normal;
};

struct AirPixel {
    vec2 windPos;
    vec2 velocity;
    vec2 backforce;
    vec2 turbulence; // x component is turbulence
};

struct SoftVertex {
    vec3 position;
    float mass;
    vec3 normal;
    int group;
    vec3 prevPosition;
    float _0;
    vec3 force0; // lift
    float _1;
    vec3 force1; // drag
    float _2;
};

// Constants -------------------------------------------------------------------

// External
const bool k_debug = DEBUG;

const int k_workGroupSize = int(gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z);
const uint k_geoBit = 1, k_airBit = 2, k_activeBit = 4;
const int k_maxEdgeSeekSteps = 64; // Necessary in pathological cases where normals form a loop
const float k_minNormalZ = 1.0f / 1000000.0f;
const float k_maxNormalZ = 1.0f - k_minNormalZ;

// Uniforms --------------------------------------------------------------------

layout (binding = 0,      rgba8ui) uniform restrict uimage2D u_frontImg;
layout (binding = 1, rgba16_snorm) uniform restrict  image2D u_fboNormImg;
layout (binding = 2,         r32i) uniform restrict iimage2D u_flagImg;

// Uniform buffer for better read-only performance
layout (binding = 0, std140) uniform Constants {
    int u_maxGeoPixels;
    int u_maxAirPixels;
    int u_screenSize;
    float u_liftC;
    float u_dragC;
    float u_windframeSize;
    float u_windframeDepth;
    float u_sliceSize;
    float u_turbulenceDist;
    float u_maxSearchDist;
    float u_windShadDist;
    float u_backforceC;
    float u_flowback;
    float u_initVelC;
    float u_windSpeed;
    float u_dt;
    int u_slice;
    float u_sliceZ;
    float u_pixelSize;
};

layout (binding = 1, std430) restrict buffer AirPixels {
    int u_airCount;
    int u_AirPixels_pad0;
    int u_AirPixels_pad1;
    int u_AirPixels_pad2;
    AirPixel u_airPixels[];
};

layout (binding = 2, std430) restrict buffer PrevAirPixels {
    int u_prevAirCount;
    int u_PrevAirPixels_pad0;
    int u_PrevAirPixels_pad1;
    int u_PrevAirPixels_pad2;
    AirPixel u_prevAirPixels[];
};

layout (binding = 3, std430) restrict buffer AirGeoMap {
    int u_airGeoMap[];
};

// Functions -------------------------------------------------------------------

bool isInTexture(ivec2 p, ivec2 texSize) {
    return all(bvec4(greaterThanEqual(p, ivec2(0)), lessThan(p, texSize)));
}

vec2 windToScreen(vec2 wind) {
    return (wind / u_windframeSize + 0.5f) * float(u_screenSize);
}

vec2 screenToWind(vec2 screen) {
    return (screen / u_screenSize - 0.5f) * u_windframeSize;
}

// Returns one of <1, 0>, <-1, 0>, <0, 1>, <0, -1> corresponding to dir
ivec2 getPixelDelta(vec2 dir) {
    vec2 signs = sign(dir);
    vec2 mags = dir * signs;
    if (mags.y >= mags.x) {
        return ivec2(0, int(signs.y));
    }
    else {
        return ivec2(int(signs.x), 0);
    }
}

// Draw ------------------------------------------------------------------------

void draw(int prevAirI) {
    AirPixel air = u_prevAirPixels[prevAirI];
    ivec2 airTexCoord = ivec2(windToScreen(air.windPos));

    // Check if in texture
    if (!isInTexture(airTexCoord, ivec2(u_screenSize))) {
        return;
    }

    uvec4 color = imageLoad(u_frontImg, airTexCoord);

    // If in geometry, follow the geo normals to find the edge
    if ((color.r & k_geoBit) != 0) {
        ivec2 pixel = airTexCoord;
        int steps = 0;
        while (true) {
            vec3 geoNormal = imageLoad(u_fboNormImg, airTexCoord).xyz;
            if (abs(geoNormal.z) > k_maxNormalZ) {
                return;
            }
            ivec2 nextPixel = pixel + getPixelDelta(geoNormal.xy);
            uvec4 nextColor = imageLoad(u_frontImg, nextPixel);

            // We found the edge, move air to it
            if ((nextColor.r & k_geoBit) == 0) {
                airTexCoord = pixel;

                //vec3 tangentVel = cross(geoNormal, cross(geoNormal, vec3(0.0f, 0.0f, 1.0f))); // TODO
                //vec2 tangentVel = geoNormal.xy * geoNormal.z; // Equivalent to above
                //tangentVel = tangentVel * u_windSpeed;

                // Set air to same position as geometry
                air.windPos = screenToWind(vec2(airTexCoord) + vec2(imageLoad(u_frontImg, airTexCoord).gb) / 255.0f);

                vec2 norm = normalize(geoNormal.xy);
                if (geoNormal.z > 0.0f) {
                    air.velocity = max(dot(air.velocity, norm), geoNormal.z * u_windSpeed) * norm;
                }
                else {
                    air.velocity = geoNormal.z * u_windSpeed * norm;
                }

                air.backforce = vec2(0.0f);
                air.turbulence = vec2(0.0f);
                break;
            }

            // If air "inside" geometry, get rid of it, unless it's on the very edge
            if (geoNormal.z < 0.0f) {
                return;
            }

            pixel = nextPixel;
            color = nextColor;
            if (++steps >= k_maxEdgeSeekSteps) {
                return;
            }
        }
    }

    // Air already exists at pixel
    if ((color.r & k_airBit) != 0) {
        return;
    }

    // Move to current air pixel buffer
    int airI = atomicAdd(u_airCount, 1);
    if (airI >= u_maxAirPixels) {
        return;
    }
    u_airPixels[airI] = air;
    u_airGeoMap[airI] = 0; // This air pixel is not yet associated with any geometry

    // Store air index
    imageStore(u_flagImg, airTexCoord, ivec4(airI + 1, 0, 0, 0));

    // Draw to front view
    color.r |= k_airBit;
    imageStore(u_frontImg, airTexCoord, color);
}

void main() {
    int workI = int(gl_LocalInvocationIndex);

    for (int prevAirI = workI; prevAirI < u_prevAirCount; prevAirI += k_workGroupSize) {
        draw(prevAirI);
    }
}