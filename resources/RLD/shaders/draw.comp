#version 450 core

#define MAX_GEO_PER_AIR 3

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

// Types -----------------------------------------------------------------------

struct Result {
    vec4 lift;
    vec4 drag;
    vec4 torq;
};

struct GeoPixel {
    vec2 windPos;
    ivec2 texCoord;
    vec4 normal;
};

struct AirPixel {
    vec2 windPos;
    vec2 velocity;
    vec2 backforce;
    vec2 turbulence; // x component is turbulence
};

struct AirGeoMapElement {
    int geoCount;
    int geoIndices[MAX_GEO_PER_AIR];
};

// Constants -------------------------------------------------------------------

const uint k_workGroupSize = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;

const bool k_distinguishActivePixels = true; // Makes certain "active" pixels brigher for visual clarity, but lowers performance
const float k_inactiveVal = k_distinguishActivePixels ? 1.0f / 3.0f : 1.0f;

const bool k_ignoreEdges = false;

// Uniforms --------------------------------------------------------------------

layout (binding = 0, rgba8) uniform  image2D u_fboImg;
layout (binding = 2,  r32i) uniform iimage2D u_flagImg;

// Uniform buffer for better read-only performance
layout (binding = 0, std140) uniform Constants {
    int u_maxGeoPixels;
    int u_maxAirPixels;
    int u_screenSize;
    float u_liftC;
    float u_dragC;
    float u_windframeSize;
    float u_windframeDepth;
    float u_sliceSize;
    float u_windSpeed;
    float u_dt;
    int u_slice;
    float u_sliceZ;
    uint u_debug;
};

layout (binding = 0, std430) restrict buffer GeoPixels {
    int u_geoCount;
    int u_GeoPixels_pad0;
    int u_GeoPixels_pad1;
    int u_GeoPixels_pad2;
    GeoPixel u_geoPixels[];
};

layout (binding = 1, std430) restrict buffer AirPixels {
    int u_airCount;
    int u_AirPixels_pad0;
    int u_AirPixels_pad1;
    int u_AirPixels_pad2;
    AirPixel u_airPixels[];
};

layout (binding = 2, std430) restrict buffer PrevAirPixels {
    int u_prevAirCount;
    int u_PrevAirPixels_pad0;
    int u_PrevAirPixels_pad1;
    int u_PrevAirPixels_pad2;
    AirPixel u_prevAirPixels[];
};

layout (binding = 3, std430) restrict buffer AirGeoMap {
    AirGeoMapElement u_airGeoMap[];
};

layout (binding = 4, std430) restrict buffer Results {
    Result u_results[];
};

// Functions -------------------------------------------------------------------

vec2 windToScreen(vec2 wind) {
    return (wind / u_windframeSize + 0.5f) * float(u_screenSize);
}

void main() {
    int workI = int(gl_LocalInvocationIndex);

    for (int prevAirI = workI; prevAirI < u_prevAirCount; prevAirI += int(k_workGroupSize)) {

        vec2 windPos = u_prevAirPixels[prevAirI].windPos;

        ivec2 texCoord = ivec2(windToScreen(windPos.xy));
        ivec2 sideTexCoord;
        if (bool(u_debug)) {
            sideTexCoord = ivec2(windToScreen(vec2(-u_sliceZ, windPos.y)));
        }

        // Check if in texture
        if (texCoord.x < 0 || texCoord.y < 0 || texCoord.x >= u_screenSize || texCoord.y >= u_screenSize) {
            continue;
        }
        // Check if in geometry
        vec4 color = imageLoad(u_fboImg, texCoord);
        if (color.r != 0.0f) {
            continue;
        }

        // Move to current air pixel buffer
        int airI = atomicAdd(u_airCount, 1);
        if (airI >= u_maxAirPixels) {
            return;
        }
        u_airPixels[airI] = u_prevAirPixels[prevAirI];
        u_airGeoMap[airI].geoCount = 0; // This air pixel is not yet associated with any geometry

        // Store air index
        imageStore(u_flagImg, texCoord, ivec4(airI + 1, 0, 0, 0));

        // Draw to front view
        color.g = k_inactiveVal;
        imageStore(u_fboImg, texCoord, color);
    }
}
