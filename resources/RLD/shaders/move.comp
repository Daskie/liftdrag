#version 450 core

#define MAX_GEO_PER_AIR 3

#ifndef DEBUG
#define DEBUG false
#endif

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

// Types -----------------------------------------------------------------------

struct Result {
    vec4 lift;
    vec4 drag;
    vec4 torq;
};

struct GeoPixel {
    vec2 windPos;
    ivec2 texCoord;
    vec4 normal;
};

struct AirPixel {
    vec2 windPos;
    vec2 velocity;
    vec2 backforce;
    vec2 turbulence; // x component is turbulence
};

struct AirGeoMapElement {
    int geoCount;
    int geoIndices[MAX_GEO_PER_AIR];
};

// Constants -------------------------------------------------------------------

const uint k_workGroupSize = gl_WorkGroupSize.x * gl_WorkGroupSize.y * gl_WorkGroupSize.z;

const bool k_debug = DEBUG;

float k_airDensity = 1.0f;

const bool k_distinguishActivePixels = true; // Makes certain "active" pixels brigher for visual clarity, but lowers performance

const bool k_doTurbulence = false; // Must also change in outline shader

const bool k_doWindShadow = true;

const bool k_doLineSearch = true;

const bool k_ignoreEdges = false;

// Uniforms --------------------------------------------------------------------

layout (binding = 0, rgba8) uniform  image2D u_fboImg;
layout (binding = 2,  r32i) uniform iimage2D u_flagImg;
layout (binding = 3,    r8) uniform  image2D u_turbImg;

layout (binding = 1) uniform sampler2D u_prevTurbTex;
layout (binding = 2) uniform sampler2D u_shadTex;

// Uniform buffer for better read-only performance
layout (binding = 0, std140) uniform Constants {
    int u_maxGeoPixels;
    int u_maxAirPixels;
    int u_screenSize;
    float u_liftC;
    float u_dragC;
    float u_windframeSize;
    float u_windframeDepth;
    float u_sliceSize;
    float u_turbulenceDist;
    float u_maxSearchDist;
    float u_windShadDist;
    float u_backforceC;
    float u_flowback;
    float u_initVelC;
    float u_windSpeed;
    float u_dt;
    int u_slice;
    float u_sliceZ;
};

layout (binding = 0, std430) restrict buffer GeoPixels {
    int u_geoCount;
    int u_GeoPixels_pad0;
    int u_GeoPixels_pad1;
    int u_GeoPixels_pad2;
    GeoPixel u_geoPixels[];
};

layout (binding = 1, std430) restrict buffer AirPixels {
    int u_airCount;
    int u_AirPixels_pad0;
    int u_AirPixels_pad1;
    int u_AirPixels_pad2;
    AirPixel u_airPixels[];
};

layout (binding = 2, std430) restrict buffer PrevAirPixels {
    int u_prevAirCount;
    int u_PrevAirPixels_pad0;
    int u_PrevAirPixels_pad1;
    int u_PrevAirPixels_pad2;
    AirPixel u_prevAirPixels[];
};

layout (binding = 3, std430) restrict buffer AirGeoMap {
    AirGeoMapElement u_airGeoMap[];
};

layout (binding = 4, std430) restrict buffer Results {
    Result u_results[];
};

// Shared ----------------------------------------------------------------------

shared vec3 s_accumulationArray[k_workGroupSize];

// Functions -------------------------------------------------------------------

vec2 windToScreen(vec2 wind) {
    return (wind / u_windframeSize + 0.5f) * float(u_screenSize);
}

float screenToWindDist(float screenDist) {
    return screenDist / float(u_screenSize) * u_windframeSize;
}

bool isScreenTurbulent(vec2 screenPos) {
    return texture2D(u_prevTurbTex, screenPos / u_screenSize).r > 0.0f;
}

bool isWindTurbulent(vec2 windPos) {
    return isScreenTurbulent(windToScreen(windPos));
}

float getShadFactor(float shad) {
    float shadDepth = shad * u_windframeDepth;
    float currDepth = u_slice * u_sliceSize;
    return float(shad != 0.0f) * max((1.0f - (currDepth - shadDepth) / u_windShadDist), 0.0f);
}

float getScreenShadFactor(vec2 screenPos) {
    return getShadFactor(texture2D(u_shadTex, screenPos / u_screenSize).r);
}

float getWindShadFactor(vec2 windPos) {
    return getScreenShadFactor(windToScreen(windPos));
}

void setScreenTurbulent(vec2 screenPos) {
    imageStore(u_turbImg, ivec2(screenPos * 0.25f), vec4(1.0f, 0.0f, 0.0f, 0.0f));
}

void setWindTurbulent(vec2 windPos) {
    setScreenTurbulent(windToScreen(windPos));
}

void accumulate() {
    uint workI = gl_LocalInvocationIndex;
    for (uint n = k_workGroupSize / 2; n > 0; n /= 2) {
        barrier();
        if (workI < n) s_accumulationArray[workI] += s_accumulationArray[workI + n];
    }
}

void main() {
    int workI = int(gl_LocalInvocationIndex);

    vec3 totalLift = vec3(0.0f);
    vec3 totalDrag = vec3(0.0f);
    vec3 totalTorq = vec3(0.0f);

    // TODO: figure out these constants
    float massDensity = 1.0f;
    float flowVelocity = u_windSpeed; // TODO: is this correct?
    float dragC = 1.0f;
    float pixelSize = screenToWindDist(1.0f);
    float windSpeed2 = u_windSpeed * u_windSpeed;

    for (int airI = workI; airI < u_airCount; airI += int(k_workGroupSize)) {

        vec2 airWindPos = u_airPixels[airI].windPos;
        vec2 airVelocity = u_airPixels[airI].velocity;
        float airTurbulence = u_airPixels[airI].turbulence.x;
        int geoCount = u_airGeoMap[airI].geoCount;
        vec2 airScreenPos = windToScreen(airWindPos);

        bool shouldSearch = geoCount == 0;

        // Check if air pixel is within turbulence
        if (k_doTurbulence && isScreenTurbulent(airScreenPos)) {
            airTurbulence = 1.0f;
            u_airPixels[airI].turbulence.x = 1.0f;
        }
        // If air pixel is turbulent, write turbulence
        if (k_doTurbulence && airTurbulence > 0.0f) {
            setScreenTurbulent(airScreenPos);
            shouldSearch = false;
        }

        // If not turbulent and no geo found for this air, search for geo
        if (shouldSearch) {
            vec2 screenPos = airScreenPos;
            ivec2 pixel = ivec2(screenPos);

            vec2 searchDir = u_airPixels[airI].backforce.xy;
            if (searchDir != vec2(0.0f)) {
                vec2 screenDir = normalize(searchDir);
                vec2 corner; if (k_doLineSearch) corner = step(vec2(0.0f), screenDir);
                float totalDist = 0.0f;
                while (true) {
                    if (k_doLineSearch) {
                        // TODO: optimize
                        vec2 delta = corner - (screenPos - vec2(pixel));
                        vec2 dist = abs(delta / screenDir);
                        if (dist.x < dist.y) {
                            screenPos += screenDir * dist.x;
                            pixel.x += int(sign(screenDir.x));
                            totalDist += screenToWindDist(dist.x);
                        }
                        else {
                            screenPos += screenDir * dist.y;
                            pixel.y += int(sign(screenDir.y));
                            totalDist += screenToWindDist(dist.y);
                        }
                    }
                    else {
                        screenPos += screenDir;
                        pixel = ivec2(screenPos);
                        totalDist += screenToWindDist(1.0f);
                    }

                    if (totalDist > u_maxSearchDist) {
                        break;
                    }

                    // If find turbulence, stop looking and mark turbulence
                    if (k_doTurbulence && isScreenTurbulent(screenPos)) {
                        // Mark air as turbulent
                        airTurbulence = 1.0f;
                        u_airPixels[airI].turbulence.x = 1.0f;
                        // Write turbulence at air
                        setScreenTurbulent(airScreenPos);
                        // Write turbulence pixel half way between found turbulence and air
                        setScreenTurbulent((airScreenPos + screenPos) * 0.5f);
                        break;
                    }

                    vec4 color = imageLoad(u_fboImg, pixel);

                    // Visualize the search
                    if (k_debug) {
                        //imageStore(u_fboImg, pixel, vec4(color.r, color.g, 0.5f, color.a));
                    }

                    if (color.r != 0.0f) { // we found a geo pixel
                        int geoI = imageLoad(u_flagImg, pixel).x;
                        if (geoI != 0) { // TODO: this should not be necessary, just here for sanity
                            --geoI;

                            ++geoCount;
                            ++u_airGeoMap[airI].geoCount;
                            u_airGeoMap[airI].geoIndices[0] = geoI;

                            if (k_doTurbulence && totalDist > u_turbulenceDist) {
                                // Set air pixel to be turbulent
                                airTurbulence = 1.0f;
                                u_airPixels[airI].turbulence.x = 1.0f;
                                // Write turbulence at air
                                setScreenTurbulent(airScreenPos);
                                // Write turbulence pixel at air and half way between air and geometry
                                setScreenTurbulent((airScreenPos + screenPos) * 0.5f);
                            }
                        }

                        break;
                    }
                }
            }
        }

        vec2 backforce = vec2(0.0f);
        vec3 lift = vec3(0.0f);
        vec3 drag = vec3(0.0f);
        vec3 torq = vec3(0.0f);
        float dragFactor = 0.0f;
        float liftFactor = 0.0f;

        // For each associated geo pixel, update backforce, lift, and drag
        for (int mapI = 0; mapI < geoCount; ++mapI) {
            int geoI = u_airGeoMap[airI].geoIndices[mapI];
            vec2 geoWindPos = u_geoPixels[geoI].windPos;
            vec3 geoNormal = u_geoPixels[geoI].normal.xyz;
            float dist = distance(airWindPos, geoWindPos);

            //float area = pixelSize * u_sliceSize / max(sqrt(1.0f - geoNormal.z * geoNormal.z), 0.001f); // TODO: needs to not be able to be infinity
            float area = pixelSize * u_sliceSize * (1.0f - abs(dot(geoNormal, normalize(vec3(airVelocity, -u_windSpeed)))));

            // Calculate backforce
            vec2 thisBackforce = normalize(-geoNormal.xy) * dist;// * dist;// = dist*dist*a + dist*b + c;
            thisBackforce *= u_backforceC;
            backforce += thisBackforce;

            // Calculate lift
            float liftFactor = 0.5f * k_airDensity * windSpeed2 * area;
            liftFactor *= dist / u_turbulenceDist;
            liftFactor *= u_liftC;
            if (airTurbulence > 0.0f) liftFactor = 0.0f;
            vec3 thisLift = geoNormal * liftFactor;

            // Calculate drag
            //float dragFactor = 0.5f * k_airDensity * windSpeed2 * max(-dot(geoNormal, normalize(vec3(airVelocity, -u_windSpeed))), 0.0f) * area; // TODO: should windSpeed2 be replaced with magnitude of airVelocity squared?
            //dragFactor *= dragFunc(dist);
            //dragFactor *= u_dragC;
            //vec3 thisDrag = -geoNormal * dragFactor;

            // Calculate torque
            //vec3 thisTorq = cross(vec3(geoWindPos, u_sliceZ), thisLift + thisDrag);
            vec3 thisTorq = cross(vec3(geoWindPos, u_sliceZ), thisLift);

            lift += thisLift;
            //drag += thisDrag;
            torq += thisTorq;
        }
        // Average
        if (geoCount > 0) {
            float invGeoCount = 1.0f / float(geoCount);
            backforce *= invGeoCount;
            //lift *= invGeoCount;
            //drag *= invGeoCount;
            //torq *= invGeoCount;
        }
        // Add to total
        totalLift += lift;
        totalDrag += drag;
        totalTorq += torq;

        // Color active air pixels more brightly
        if (k_debug && k_distinguishActivePixels && geoCount > 0) {
            ivec2 texCoord = ivec2(windToScreen(airWindPos));
            vec4 color = imageLoad(u_fboImg, texCoord);
            color.g = 1.0f;
            imageStore(u_fboImg, texCoord, color);
        }

        // Update velocity
        airVelocity += backforce * u_dt;
        // Sweep back by diminishing xy components
        float factor;
        if (k_doWindShadow) {
            factor = mix(u_flowback, 1.0f, getScreenShadFactor(airScreenPos));
        }
        else {
            factor = u_flowback;
        }
        factor = pow(factor, u_sliceSize);
        airVelocity *= factor;

        // Update location
        airWindPos += airVelocity * u_dt;

        u_airPixels[airI].windPos = airWindPos;
        u_airPixels[airI].velocity = airVelocity;
        u_airPixels[airI].backforce = backforce;
        u_airPixels[airI].turbulence.x = airTurbulence;
    }

    // Accumulate lift
    s_accumulationArray[workI] = totalLift;
    accumulate();
    if (workI == 0) u_results[u_slice].lift.xyz += s_accumulationArray[0];

    // Accumulate drag
    //s_accumulationArray[workI] = totalDrag;
    //accumulate();
    //if (workI == 0) u_results[u_slice].drag.xyz += s_accumulationArray[0];

    // Accumulate torque
    s_accumulationArray[workI] = totalTorq;
    accumulate();
    if (workI == 0) u_results[u_slice].torq.xyz += s_accumulationArray[0];
}