#version 450 core

#ifndef DISTINGUISH_ACTIVE_PIXELS
#define DISTINGUISH_ACTIVE_PIXELS false
#endif

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Constants -------------------------------------------------------------------

const uint k_geoBit = 1, k_airBit = 2, k_activeBit = 4; // Must also change in other shaders
const bool k_distinguishActivePixels = DISTINGUISH_ACTIVE_PIXELS; // Makes certain "active" pixels brigher for visual clarity, but lowers performance
const float k_inactiveVal = k_distinguishActivePixels ? 1.0f / 3.0f : 1.0f;

// Uniforms --------------------------------------------------------------------

layout (binding = 0, rgba8ui) uniform restrict uimage2D u_frontImg;

layout (binding = 0) uniform sampler2D u_turbTex;
layout (binding = 2) uniform sampler2D u_shadTex;

// Uniform buffer for better read-only performance
layout (binding = 0, std140) uniform Constants {
    int u_maxGeoPixels;
    int u_maxAirPixels;
    int u_screenSize;
    float u_liftC;
    float u_dragC;
    float u_windframeSize;
    float u_windframeDepth;
    float u_sliceSize;
    float u_turbulenceDist;
    float u_maxSearchDist;
    float u_windShadDist;
    float u_backforceC;
    float u_flowback;
    float u_initVelC;
    float u_windSpeed;
    float u_dt;
    int u_slice;
    float u_sliceZ;
    float u_pixelSize;
};

// Functions -------------------------------------------------------------------

float getShadFactor(float shad) {
    float shadDepth = shad * u_windframeDepth;
    float currDepth = u_slice * u_sliceSize;
    return float(shad != 0.0f) * max((1.0f - (currDepth - shadDepth) / u_windShadDist), 0.0f);
}

void main() {
    ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(texCoord, ivec2(u_screenSize)))) {
        return;
    }

    uvec4 frontVal = imageLoad(u_frontImg, texCoord);
    float activeFactor = float(bool(frontVal & k_activeBit)) * (1.0f - k_inactiveVal) + k_inactiveVal;
    float geo = float(bool(frontVal & k_geoBit)) * activeFactor;
    float air = float(bool(frontVal & k_airBit)) * activeFactor;
    float turb = texture(u_turbTex, (vec2(texCoord) + 0.5f) / float(u_screenSize)).r;
    float shad = texture(u_shadTex, (vec2(texCoord) + 0.5f) / float(u_screenSize)).r;

    vec4 color;
    color.rgb = vec3(geo * 0.5f);
    color.r += getShadFactor(shad) * 0.5f;
    color.g += air;
    color.b += turb * 0.5f;
    color.a = 1.0f;
    imageStore(u_frontImg, texCoord, uvec4(round(color * 255.0f)));
}